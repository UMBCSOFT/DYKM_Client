{"version":3,"sources":["utility/shared_websocket.js","Header.js","pages/About.js","pages/HowToPlay.js","utility/websocket.js","utility/NetworkedPage.js","pages/CreateGame.js","pages/JoinGame.js","pages/HostWaitingRoom.js","Component/ButtonOrWait.js","pages/Question.js","pages/WaitingRoom.js","media/logo.svg","pages/Home.js","utility/ScoreContent.js","pages/Scores.js","pages/QuestionMatch.js","utility/GameSummaryContent.js","pages/EndGame.js","media/mainmenu.png","media/creategame.png","media/joingame.png","media/waitingroom.png","media/waitingroom2.png","media/question.png","media/gamematch.png","media/roundend.png","media/finalscores.png","media/dykm.png","pages/ProductPage.js","utility/Content.js","App.js","utility/reportWebVitals.js","index.js"],"names":["stringifyEvent","e","obj","k","JSON","stringify","v","Node","Window","window","Post","message","undefined","frame","document","getElementById","contentWindow","postMessage","addEventListener","event","source","currentTarget","content","data","startsWith","rest","substring","length","socket","WebSocket","onmessage","onopen","onerror","onclose","socketurl","console","log","send","close","Header","activeKey","Nav","variant","defaultActiveKey","Item","Link","href","About","className","howToPlay","DYKM_Websocket","url","this","msg","parent","_messageHandler","_Post","pls","Error","context","func","_onmessage","bind","_onerror","_onopen","_onclose","target","json","parse","NetworkedPage","props","handleNameChange","state","roomCode","name","id","redirect","PORT","REQ_STATES","UNSET","OPENED","HEADERS_RECEIVED","LOADING","DONE","Http","username","readyState","status","ConnectToWebsocket","responseText","concat","_roomCode","callback","httpRequest","XMLHttpRequest","onreadystatechange","success","HTTPOnReadyStateChangeHandler","alert","open","setState","JoinRoom","toString","roomCode_","setOnMessage","RespondToSocketMessages","setOnClose","wasClean","code","reason","setOnError","error","setOnOpen","OnOpenWebsocket","connect","value","React","Component","CreateGame","CreateRoom","radioOnChange","onPackSelect","numRounds","gamePack","CreateRoomHTTPCallback","substr","parseInt","getAttribute","preventDefault","CloseNetworkedPage","to","pathname","Form","Group","as","Row","Label","column","sm","Col","type","placeholder","onChange","Tab","Container","ListGroup","action","onClick","Content","Pane","eventKey","Check","label","defaultChecked","numvalue","controlId","Text","span","offset","Button","JoinGame","handleCodeChange","id_","id__","HostWaitingRoom","wasAbleToTransition","question","playerElements","location","setTimeout","transitionToGameMessage","playerUpdateMessage","playerNames","split","map","x","forceUpdate","StartGame","ButtonOrWait","switchToWait","Question","SubmitQuestion","HandleAnswerChange","answer","doneAnswering","animationFrameID","timerSeconds","GetTimerSeconds","timerPercent","GetTimerPercent","cancelAnimationFrame","pairs","timerMessage","timer","startAndEnd","timerStart","timerEnd","requestAnimationFrame","TimerHandler","Date","getTime","Math","max","floor","percent","min","matchPairStr","ProgressBar","now","Card","border","bg","text","Body","Control","WaitingRoom","Home","isChrome","isFirefox","isSafari","src","logo","alt","size","block","rel","ScoreContent","isDisplayRoundScore","displayRoundScore","playerList","scoreRowList","orderedPlayerList","sort","a","b","score","roundScore","i","md","numCorrectMatches","push","GenerateScoreContent","Scores","HandleClick","clickedSubmit","isLastRound","playerScoresObjList","scoresStr","playerScoresStrList","infoList","response","transitionEndGame","playerScoreMessage","playerScoreStr","ConvertScoreStrToObjList","IsLastRound","GetPlayerList","scoreContent","MatchDropdown","currectPlayer","currentPlayer","correctPlayer","pair","correctPlayerAnswer","matchPairList","setBtnRef","element","btnRef","chosenPlayerPair","getElementsByTagName","innerHTML","Dropdown","LocalHandleDropdownSelect","DropdownButton","title","ref","GetDropdown","MatchRow","QuestionMatch","HandleSubmit","HandleDropdownSelect","ConvertNameAnswerPairsStrToList","matches","array","j","random","pairStrList","pairList","matchStr","matchesList","key","hasOwnProperty","join","playerMatches","ConvertMatchesToStr","guessedPlayer","guessedPlayerAnswer","newMatches","options","ShuffleArray","style","width","GameSummaryContent","winner","p","GetWinner","EndGame","buttons","MAIN_MENU","PLAY_AGAIN","btnChoice","playAgain","gameSummaryContent","ProductPage","dykm","Carousel","mainmenu","height","creategame","joingame","waitingroom","waitingroom2","questionmatch","roundend","finalscores","exact","path","HowToPlay","component","initialContent","slice","call","head","outerHTML","App","frameBorder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.d97be393.chunk.js","sourcesContent":["// This file is only to be included in index.js. To use the websocket include websocket.js\n// MESSAGES incoming to this file:\n// WEBSOCKET_CONNECT IP // This will connect or be ignored if already connected\n// WEBSOCKET_SEND message\n// WEBSOCKET_CLOSE\n\n// OUTGOING MESSAGES:\n// WEBSOCKET_ONMESSAGE {json serialized event}\n// WEBSOCKET_ONOPEN {json serialized event}\n// WEBSOCKET_ONERROR {json serialized event}\n// WEBSOCKET_ONCLOSE {json serialized event}\nwindow.Post = function(message) {\n    if(window.frame === undefined) {\n        window.frame = document.getElementById('Frame').contentWindow;\n    }\n    window.frame.postMessage(message);\n}\n\nfunction stringifyEvent(e) {\n    const obj = {};\n    for (let k in e) {\n        obj[k] = e[k];\n    }\n    return JSON.stringify(obj, (k, v) => {\n        if (v instanceof Node) return 'Node';\n        if (v instanceof Window) return 'Window';\n        return v;\n    }, ' ');\n}\n\nfunction messageHandler(event) {\n    if(event.source === window) {\n        return;\n    }\n    if(event.currentTarget !== window) {\n        return;\n    }\n    let content = event.data;\n    if(content.startsWith(\"WEBSOCKET_ONMESSAGE\")\n        || content.startsWith(\"WEBSOCKET_ONOPEN\")\n        || content.startsWith(\"WEBSOCKET_ONERROR\")\n        || content.startsWith(\"WEBSOCKET_ONCLOSE\")) {\n        return; // These are outgoing messages only. For whatever reason the parent window is getting these messages when we send them to the child???? Idk\n    }\n    if(content.startsWith(\"WEBSOCKET_CONNECT \")) {\n        let rest = content.substring(\"WEBSOCKET_CONNECT \".length);\n        if(window.socket === undefined) {\n            window.socket = new WebSocket(rest);\n            window.socket.onmessage = (e)=>{\n                window.Post(\"WEBSOCKET_ONMESSAGE \" + stringifyEvent(e));\n            }\n            window.socket.onopen    = (e)=>{\n                window.Post(\"WEBSOCKET_ONOPEN \" + stringifyEvent(e))\n            };\n            window.socket.onerror   = (e)=>{\n                window.Post(\"WEBSOCKET_ONERROR \" + stringifyEvent(e))\n            };\n            window.socket.onclose   = (e)=>{\n                window.socket = undefined;\n                window.Post(\"WEBSOCKET_ONCLOSE \" + stringifyEvent(e))\n            };\n\n            if(window.socketurl === rest) {\n                window.Post(\"WEBSOCKET_ONOPEN null\")\n                console.log(\"Sending fake onopen since this is a resume\");\n            }\n\n            window.socketurl = rest;\n        }\n    }\n    else if(content.startsWith(\"WEBSOCKET_SEND \")) {\n        console.log(content)\n        let rest = content.substring(\"WEBSOCKET_SEND \".length);\n        if(window.socket !== undefined) {\n            window.socket.send(rest);\n        }\n    }\n    else if(content.startsWith(\"WEBSOCKET_CLOSE\")) {\n        if(window.socket !== undefined) {\n            window.socket.close();\n        }\n    }\n    else {\n        console.log(\"UNHANDLED \" + content);\n    }\n}\nwindow.addEventListener(\"message\", messageHandler, false);","import React from 'react'\nimport {Nav} from \"react-bootstrap\";\n\nconst Header = (activeKey = \"/\") => {\n    return (\n        <Nav variant=\"pills\" defaultActiveKey={activeKey}>\n            <Nav.Item>\n                <Nav.Link href=\"/\">Home</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n                <Nav.Link href=\"/howtoplay\">How To Play</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n                <Nav.Link href=\"/about\">About</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n                <Nav.Link href=\"/productpage\">Product Page</Nav.Link>\n            </Nav.Item>\n            {/*<Nav.Item>*/}\n            {/*    <Nav.Link eventKey=\"disabled\" disabled>*/}\n            {/*        Disabled*/}\n            {/*    </Nav.Link>*/}\n            {/*</Nav.Item>*/}\n        </Nav>\n    );\n};\nexport default Header;","import '../css/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport React from 'react';\n\nfunction About(){\n    return (\n        <div className=\"About\">\n            <header className=\"App-header\">\n                    <div className= \"mb-2\">\n                        <h1>About</h1>\n                        <h5>\n                            This game was created as a project for Software Engineering I (CMSC 447) at UMBC, Spring 2021\n                        </h5>\n                    </div>\n\n                    <div className= \"mb-2\">\n                        <h1>Meet Team SOFT</h1>\n                        <h5>\n                            Lorem ipsum dolor\n                        </h5>\n                    </div>\n            </header>\n        </div>\n    );\n}\n\nexport default About;\n\n","import '../css/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\n\nfunction howToPlay(){\n  return (\n      <div className=\"howtoplay\">\n        <header className=\"App-header\">\n            <div className= \"mb-2\">\n              <h1>How To Play</h1>\n              <h5><i>\n                1. Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n                sed do eiusmod tempor incididunt ut labore et dolore magna\n                aliqua.\n              </i></h5>\n              <h5><i>\n                2. Ut enim ad minim veniam, quis nostrud exercitation\n                ullamco laboris nisi ut aliquip ex ea commodo consequat.\n              </i></h5>\n              <h5><i>\n                3. Duis\n                aute irure dolor in reprehenderit in voluptate velit esse cillum\n                dolore eu fugiat nulla pariatur.\n              </i></h5>\n              <h5><i>\n                4. Excepteur sint occaecat cupidatat\n                non proident, sunt in culpa qui officia deserunt mollit anim id\n                est laborum.\n              </i></h5>\n            </div>\n        </header>\n      </div>\n  );\n};\n\nexport default howToPlay;","class DYKM_Websocket {\n    constructor(url) {\n        this.url = url;\n    }\n    _Post(msg) {\n        window.parent.postMessage(msg, \"*\");\n    }\n\n    connect() {\n        window.addEventListener(\"message\", (e)=>{\n            this._messageHandler(e, this);\n        }, false);\n        this._Post(\"WEBSOCKET_CONNECT \" + this.url);\n    }\n\n    send(message) {\n        console.log(\"Sending message to server \" + message);\n        this._Post(\"WEBSOCKET_SEND \" + message);\n    }\n\n    set onmessage(pls) {\n        throw new Error(\"Do not use socket.onmessage = func, use setOnMessage(this, func)\");\n    }\n    set onerror(pls) {\n        throw new Error(\"Do not use socket.onerror = func, use setOnError(this, func)\");\n    }\n    set onopen(pls) {\n        throw new Error(\"Do not use socket.onopen = func, use setOnOpen(this, func)\");\n    }\n    set onclose(pls) {\n        throw new Error(\"Do not use socket.onclose = func, use setOnClose(this, func)\");\n    }\n\n    setOnMessage(context, func) {\n        if(func === undefined) {\n            this._onmessage = undefined;\n            return;\n        }\n        this._onmessage = func.bind(context);\n    }\n\n    setOnError(context, func) {\n        if(func === undefined) {\n            this._onerror = undefined;\n            return;\n        }\n        this._onerror = func.bind(context);\n    }\n\n    setOnOpen(context, func) {\n        if(func === undefined) {\n            this._onopen = undefined;\n            return;\n        }\n        this._onopen = func.bind(context);\n    }\n\n    setOnClose(context, func) {\n        if(func === undefined) {\n            this._onclose = undefined;\n            return;\n        }\n        this._onclose = func.bind(context);\n    }\n\n    close() {\n        this._Post(\"WEBSOCKET_CLOSE\");\n    }\n\n    _messageHandler(event, socket) {\n        if(event.source === window) {\n            return;\n        }\n        if(event.target !== window) {\n            return;\n        }\n        let content = event.data;\n        if(content.startsWith(\"WEBSOCKET_ONMESSAGE \")) {\n            let json = content.substring(\"WEBSOCKET_ONMESSAGE \".length);\n            let event = JSON.parse(json);\n            if(socket._onmessage) {\n                socket._onmessage(event);\n            }\n        }\n        else if(content.startsWith(\"WEBSOCKET_ONOPEN \")) {\n            let json = content.substring(\"WEBSOCKET_ONOPEN \".length);\n            let event = JSON.parse(json);\n            if(socket._onopen) {\n                socket._onopen(event);\n            }\n        }\n        else if(content.startsWith(\"WEBSOCKET_ONERROR \")) {\n            let json = content.substring(\"WEBSOCKET_ONERROR \".length);\n            let event = JSON.parse(json);\n            if(socket._onerror) {\n                socket._onerror(event);\n            }\n        }\n        else if(content.startsWith(\"WEBSOCKET_ONCLOSE \")) {\n            let json = content.substring(\"WEBSOCKET_ONCLOSE \".length);\n            let event = JSON.parse(json);\n            if(socket._onclose) {\n                socket._onclose(event);\n            }\n        }\n        else{\n            console.log(\"Unhandled DYKM Websocket event `\" + content + \"`\")\n        }\n    }\n}\nexport {DYKM_Websocket}","import React from 'react';\nimport {DYKM_Websocket} from \"./websocket\";\n\nclass NetworkedPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n        this.socket = undefined;\n\n        this.state = {\n            roomCode: \"No Room Code\",\n            name: \"\",\n            id: null,\n            redirect: false\n        };\n\n        this.PORT = 1337;\n        this.REQ_STATES = {\n            UNSET: 0,\n            OPENED: 1,\n            HEADERS_RECEIVED: 2,\n            LOADING: 3,\n            DONE: 4\n        };\n\n\n    };\n\n    HTTPOnReadyStateChangeHandler(Http, id, username) {\n        if (Http.readyState === this.REQ_STATES.DONE) {\n            if(Http.status === 200) {\n                console.log(\"Connecting to websocket.\")\n                if (username) {\n                    this.ConnectToWebsocket(Http.responseText, id, username);\n                }\n                else {\n                    this.ConnectToWebsocket(Http.responseText, id);\n                }\n                return true;\n            }\n            else {\n                console.log(\"ERROR \".concat(Http.status, \": \") + Http.responseText);\n                return false;\n            }\n        }\n    }\n\n    JoinRoom(_roomCode, callback) {\n        let roomCode;\n        if (_roomCode) {\n            roomCode = _roomCode;\n        }\n        else {\n            roomCode = this.state.roomCode;\n        }\n\n        const httpRequest = new XMLHttpRequest();\n        const url = \"http://localhost:\".concat(this.PORT, \"/room/get/\", roomCode);\n        const username = this.state.name;\n\n        console.log(\"Joining room with url: \".concat('\\n', url));\n        httpRequest.onreadystatechange = () => {\n            let success = this.HTTPOnReadyStateChangeHandler(httpRequest, roomCode, username)\n            if(callback)\n                callback(success, roomCode);\n        }\n        httpRequest.onerror = () => {\n            alert(\"Unable to join server room\");\n        }\n        httpRequest.open(\"GET\", url);\n        httpRequest.send();\n        this.setState( { roomCode: roomCode });\n    };\n\n    CreateRoomHTTPCallback(Http, callback) {\n        if (Http.readyState === 4 && Http.status === 200) {\n            let json = JSON.parse(Http.responseText);\n            this.setState( {roomCode: json[\"id\"]}, () => {\n                callback(json[\"id\"]);\n            });\n            if(json[\"id\"] === undefined) {\n                alert(\"Unable to generate room code for this game room.\");\n            }\n            else {\n                this.JoinRoom(json[\"id\"]);\n            }\n        }\n        else {\n            console.log(\"state: \" + this.readyState.toString());\n        }\n    };\n\n    RespondToSocketMessages(e, callback) {\n        if(e === undefined || this.socket === undefined) return;\n        // Respond to heartbeats\n        if(e.data === \"PING\") {\n            this.socket.send(\"PONG\");\n        }\n    };\n\n    OnOpenWebsocket(roomCode_) {\n        console.log(`[websocket open] Connection established\\nAttempting to join room ${roomCode_}`);\n        this.socket.send(\"JOIN \" + roomCode_);\n    }\n\n    ConnectToWebsocket(url, roomCode_, username_ = \"\") {\n        this.url = url;\n        this.socket = new DYKM_Websocket(url);\n\n        this.socket.setOnMessage(this, this.RespondToSocketMessages);\n\n        this.socket.setOnClose(this, function(event) {\n            if (event.wasClean) {\n                console.log(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);\n            } else {\n                // e.g. server process killed or network down\n                // event.code is usually 1006 in this case\n                console.log('[close] Connection died');\n            }\n        });\n\n        this.socket.setOnError(this, function(error) {\n            alert(\"Unable to connect to server room\");\n            console.log(`[error] ${error.message}`);\n        });\n\n        this.socket.setOnOpen(this, () => this.OnOpenWebsocket(roomCode_));\n        this.socket.connect(); // NOTE: We need this even though usually with a normal websocket you don't. REMEMBER THIS\n    }\n\n    CloseNetworkedPage() {\n        // Shutdown any socket stuff but keep the underlying connection in websocket.js open\n        this.socket.setOnMessage(this, undefined);\n        this.socket.setOnClose(this, undefined);\n        this.socket.setOnError(this, undefined);\n        this.socket.setOnOpen(this, undefined);\n        this.socket = undefined;\n    }\n\n    handleNameChange(e) {\n        this.setState({name: e.target.value})\n    };\n}\n\nexport default NetworkedPage;","import '../css/style.css'\nimport '../css/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {Row, Col, Button, Form, Tab, Container} from 'react-bootstrap'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport React from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport NetworkedPage from '../utility/NetworkedPage'\n\nclass CreateGame extends NetworkedPage {\n\n    constructor(props) {\n        super(props);\n        this.CreateRoom = this.CreateRoom.bind(this);\n        this.radioOnChange = this.radioOnChange.bind(this);\n        this.onPackSelect = this.onPackSelect.bind(this);\n        this.numRounds = 1;\n        this.gamePack = \"doyouknowme\";\n    };\n\n    CreateRoom() {\n        console.log(\"CreateRoom()\");\n        const Http = new XMLHttpRequest();\n        const url = \"http://localhost:\".concat(this.PORT, \"/room/create\");\n        console.log(\"URL: \".concat(url));\n        Http.addEventListener('load', () => this.CreateRoomHTTPCallback(Http));\n        Http.onerror = function () {\n            alert(\"Unable to create a game on the game server\");\n        }\n        Http.open(\"POST\", url);\n        console.log(\"Opened POST request\")\n        Http.send();\n        console.log(\"Sent post\");\n    }\n\n    CreateRoomHTTPCallback(Http) {\n        super.CreateRoomHTTPCallback(Http, (roomCode_) => {\n            this.setState({ roomCode: roomCode_ });\n            this.JoinRoom(roomCode_);\n        });\n    }\n\n    JoinRoom(roomCode) {\n        super.JoinRoom(roomCode, (success, roomCode_) => {\n            this.setState({ roomCode: roomCode_ });\n        })\n    };\n\n    RespondToSocketMessages(e) {\n        if(this.socket === undefined) return;\n        super.RespondToSocketMessages(e);\n\n        if (e.data.toString().startsWith(\"WELCOME \")) {\n            console.log(this.state.roomCode);\n            this.socket.send(\"SETNUMROUNDS \" + this.numRounds);\n            this.socket.send(\"SETGAMEPACK \" + this.gamePack);\n            //this.socket.send(\"ID RECEIVED\");\n            this.socket.send(\"CHANGENICK \" + this.state.name);\n            this.setState({ id: e.data.substr(\"WELCOME \".length)});\n            this.setState({ redirect: true});\n        }\n\n    }\n\n    handleNameChange(e) {\n        this.setState({name: e.target.value})\n    }\n\n    radioOnChange(e){\n        let value = parseInt(e.target.getAttribute(\"numvalue\"));\n        this.numRounds = value;\n    }\n\n    onPackSelect(e) {\n        e.preventDefault();\n        this.gamePack = e.target.href.substr(1); // Cut off the #\n        console.log(\"Changed game pack to \" + this.gamePack);\n    }\n\n    render() {\n        if (this.state.redirect) {\n            this.CloseNetworkedPage();\n            console.log(\"Roomcode in creategame: \\n\" + this.state.roomCode);\n            return (\n                <Redirect to={{\n                    pathname: \"/hostwaitingroom\",\n                    state: {\n                        id: this.state.id,\n                        roomCode: this.state.roomCode,\n                        name: this.state.name,\n                        url: this.url,\n                    }\n                }} />\n            )\n        }\n        else {\n            return (\n                <div className=\"creategame App-header\">\n                    <div className=\"mb-2 GameSettings\">\n                        <h1 className=\"Center\">CREATE GAME</h1>\n                        <div id=\"createGameSettings\">\n                            <Form.Group as={Row} id=\"nickname\">\n                                <Form.Label column sm={2}>\n                                    Nickname\n                                </Form.Label>\n                                <Col sm={10}>\n                                    <input type=\"text\" placeholder=\"Enter a nickname!\" value={this.state.name} onChange={this.handleNameChange}/>\n                                </Col>\n                            </Form.Group>\n\n                            <Form.Group as={Row} id=\"questionpack\">\n                                <Form.Label column sm={2}>\n                                    Question Pack\n                                </Form.Label>\n                                <Col sm={10}>\n                                    <Tab.Container id=\"game-type\" defaultActiveKey=\"#doyouknowme\">\n                                        <Row>\n                                            <Col sm = \"auto\">\n                                                <ListGroup >\n                                                    <ListGroup.Item\n                                                        action\n                                                        href=\"#doyouknowme\"\n                                                        onClick={(e)=>this.onPackSelect(e)}\n                                                    >\n                                                        Do You Know Me?\n                                                    </ListGroup.Item>\n                                                    <ListGroup.Item\n                                                        action\n                                                        href=\"#icebreakers\"\n                                                        onClick={(e)=>this.onPackSelect(e)}\n                                                    >\n                                                        Ice Breakers\n                                                    </ListGroup.Item>\n                                                </ListGroup>\n                                            </Col>\n                                            <Col sm={8}>\n                                                <Tab.Content>\n                                                    <Tab.Pane eventKey=\"#doyouknowme\">\n                                                        Official question pack - see if you <i>really</i> know your friends!\n                                                    </Tab.Pane>\n                                                    <Tab.Pane eventKey=\"#icebreakers\">\n                                                        Great question pack to play with new friends!\n                                                    </Tab.Pane>\n                                                </Tab.Content>\n                                            </Col>\n                                        </Row>\n                                    </Tab.Container>\n                                </Col>\n                            </Form.Group>\n\n                            <fieldset>\n                                <Form.Group as={Row}>\n                                    <Form.Label as=\"legend\" column sm={2}>\n                                        Rounds\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Check\n                                            type=\"radio\"\n                                            label=\"1 Round\"\n                                            defaultChecked={true}\n                                            onChange={(e)=>this.radioOnChange(e)}\n                                            name=\"formHorizontalRadios\"\n                                            id=\"formHorizontalRadios1\"\n                                            numvalue={1}\n                                        />\n                                        <Form.Check\n                                            type=\"radio\"\n                                            label=\"5 Rounds\"\n                                            onChange={(e)=>this.radioOnChange(e)}\n                                            name=\"formHorizontalRadios\"\n                                            id=\"formHorizontalRadios2\"\n                                            numvalue={5}\n                                        />\n                                        <Form.Check\n                                            type=\"radio\"\n                                            label=\"10 Rounds\"\n                                            onChange={(e)=>this.radioOnChange(e)}\n                                            name=\"formHorizontalRadios\"\n                                            id=\"formHorizontalRadios3\"\n                                            numvalue={10}\n                                        />\n                                    </Col>\n                                </Form.Group>\n                            </fieldset>\n\n                            <Form.Group controlId=\"roomcode\">\n                                <Form.Label>Secret Code</Form.Label>\n                                <Form.Text><b>{this.state.roomCode}</b></Form.Text>\n                            </Form.Group>\n\n                            <Form.Group as={Row}>\n                                <Col sm={{ span: 10, offset: 2 }}>\n                                    <Button variant=\"primary\" type=\"submit\" onClick={() => this.CreateRoom()}>Create the game!</Button>\n                                </Col>\n                            </Form.Group>\n                        </div>\n                    </div>\n                </div>\n\n            );\n        }\n    }\n}\nexport default CreateGame;\n\n","import '../css/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {Button, Form} from 'react-bootstrap'\nimport React from 'react';\nimport NetworkedPage from '../utility/NetworkedPage'\nimport {Redirect} from \"react-router-dom\";\n\nclass JoinGame extends NetworkedPage {\n\n    constructor(props) {\n        super(props);\n        this.handleCodeChange = this.handleCodeChange.bind(this);\n        this.handleNameChange = this.handleNameChange.bind(this);\n        this.socket = undefined;\n    };\n\n    handleNameChange(e) {\n        this.setState({name: e.target.value});\n    };\n\n    handleCodeChange(e) {\n        this.setState({roomCode: e.target.value});\n    };\n\n    JoinRoom(id_) {\n        super.JoinRoom(id_, (success, id__) => {\n            this.setState({ id: id__ });\n        });\n    }\n\n    CreateRoomHTTPCallback(Http) {\n        super.CreateRoomHTTPCallback(Http, (id_) => {\n            this.setState({ id: id_ });\n        })\n    };\n\n    RespondToSocketMessages(e) {\n        if(this.socket === undefined) return;\n        if (e.data.toString().startsWith(\"WELCOME \")) {\n            console.log(\"MY NAME IS: \", this.state.name);\n            this.socket.send(\"CHANGENICK \" + this.state.name);\n            this.setState({ redirect: true});\n        }\n        super.RespondToSocketMessages(e);\n    }\n\n    render() {\n        if (this.state.redirect) {\n            this.CloseNetworkedPage();\n            console.log(\"Roomcode in joingame: \\n\" + this.state.roomCode);\n            return (\n                <Redirect to={{\n                    pathname: \"/waitingroom\",\n                    state: {\n                        id: this.state.id,\n                        roomCode: this.state.roomCode,\n                        name: this.state.name,\n                        url: this.url,\n                    }\n                }} />\n            )\n        } else {\n            return (\n                <div className=\"joingame Center\">\n                    <header className=\"App-header\">\n                        <div className=\"mb-2 GameSettings\">\n                            <h1>JOIN A GAME</h1>\n                            <Form>\n                                <Form.Group controlId=\"nickname\">\n                                    <Form.Label>Nickname</Form.Label>\n                                    <input type=\"name\" placeholder=\"Enter a nickname!\" value={this.state.name} onChange={this.handleNameChange}/>\n                                </Form.Group>\n\n                                <Form.Group controlId=\"roomcode\">\n                                    <Form.Label>Secret Code</Form.Label>\n                                    <input type=\"text\" placeholder=\"Enter a nickname!\" value={this.state.roomCode} onChange={this.handleCodeChange}/>\n                                </Form.Group>\n\n                                <Button variant=\"primary\" type=\"button\" onClick={() => this.JoinRoom(this.state.roomCode)}>\n                                    Join Game\n                                </Button>\n                            </Form>\n                        </div>\n                    </header>\n                </div>\n            );\n        }\n    }\n}\n\nexport default JoinGame;\n\n","import '../css/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {Button, Form} from 'react-bootstrap'\nimport React from 'react';\nimport NetworkedPage from \"../utility/NetworkedPage\";\nimport {Redirect} from \"react-router-dom\";\n\nclass HostWaitingRoom extends NetworkedPage {\n\n    constructor() {\n        super();\n        this.question = null\n        this.playerElements = [];\n    }\n\n    componentDidMount(){\n        if(this.socket !== undefined) {\n            this.socket.close(); // Close old connection here, not in ConnectToWebsocket because that reconnects to the existing socket for other pages\n        }\n        this.ConnectToWebsocket(\n            this.props.location.state.url,\n            this.props.location.state.id,\n            this.props.location.state.name\n        );\n    }\n\n    wasAbleToTransition = false;\n    StartGame() {\n        console.log(\"Start game?\");\n        this.socket.send(\"START GAME\");\n        setTimeout(()=>{\n            if(!this.wasAbleToTransition) {\n                alert(\"Unable to transition into the game\");\n            }\n        }, 5000);\n    }\n\n    RespondToSocketMessages(e) {\n        if(this.socket === undefined) return;\n        super.RespondToSocketMessages(e);\n\n        console.log(e.data);\n\n        const transitionToGameMessage = \"TRANSITION QUESTION \";\n        if (e.data.startsWith(transitionToGameMessage)) {\n            this.wasAbleToTransition = true;\n            this.question = e.data.substr(transitionToGameMessage.length);\n            this.setState({redirect: true});\n            console.log(\"Got Question transition HOST WAITING ROOM. Question is \" + this.question);\n        }\n\n        const playerUpdateMessage = \"PLAYERUPDATE \";\n        if (e.data.startsWith(playerUpdateMessage)) {\n            let playerNames = e.data.substr(playerUpdateMessage.length).split(\";\"); // TODO: people can put ; in their name and break this\n            this.playerElements = playerNames.map(x=><h5 key={x}>{x}</h5>);\n            this.forceUpdate();\n        }\n    }\n\n    render() {\n        if (this.state.redirect) {\n            this.CloseNetworkedPage();\n            return (\n                <Redirect to={{\n                    pathname: \"/Question\",\n                    state: {\n                        id: this.props.location.state.id,\n                        roomCode: this.state.roomCode,\n                        name: this.props.location.state.name,\n                        url: this.props.location.state.url,\n                        question: this.question\n                    }\n                }}/>\n            );\n        } else {\n            return (\n                <div className=\"hostwaitingroom\">\n                    <header className=\"App-header\">\n                        <div className=\"mb-2\">\n                            <h1>Your Game</h1>\n                            <h5>\n                                Your game was created successfully! Share the following ✨ secret code ✨\n                                with your friends so they can join in on the fun!\n                            </h5>\n                        </div>\n\n                        <div className=\"code\">\n                            <Form.Text><h1>Secret Code: <b>{this.props.location.state.roomCode}</b></h1></Form.Text>\n                        </div>\n\n                        <div className=\"players\">\n                            <h1>Waiting for players to join...</h1>\n                            {this.playerElements.length === 0 && <h5>* as players join, their names will show up here * </h5>}\n                            {this.playerElements}\n                        </div>\n\n                        <Button type=\"submit\" onClick={() => this.StartGame()}>Start The Game!</Button>\n                    </header>\n                </div>\n            );\n        }\n    }\n}\n\nexport default HostWaitingRoom;\n\n","import React from 'react';\nimport {Button} from \"react-bootstrap\";\n\nfunction ButtonOrWait(props) {\n    if (props.switchToWait === true) {\n        return (<h2>Waiting for other players...</h2>);\n    } else {\n        return (\n            <Button variant=\"primary\" type=\"submit\" onClick={() => {\n                props.callback()\n            }}>\n                {props.label}\n            </Button>\n        );\n    }\n}\nexport default ButtonOrWait;","import '../css/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {Form} from 'react-bootstrap'\nimport Card from 'react-bootstrap/Card'\nimport ProgressBar from 'react-bootstrap/ProgressBar'\nimport React from 'react';\nimport NetworkedPage from \"../utility/NetworkedPage\";\nimport {Redirect} from \"react-router-dom\";\nimport ButtonOrWait from \"../Component/ButtonOrWait\";\n\nclass Question extends NetworkedPage {\n\n    constructor() {\n        super();\n        this.SubmitQuestion = this.SubmitQuestion.bind(this);\n        this.HandleAnswerChange = this.HandleAnswerChange.bind(this);\n        this.answer = null;\n        this.doneAnswering = false;\n        this.animationFrameID = undefined;\n    }\n\n    componentDidMount() {\n        this.ConnectToWebsocket(\n            this.props.location.state.url,\n            this.props.location.state.id,\n            this.props.location.state.name\n        );\n        this.socket.send(\"REQUESTTIMER\");\n        this.setState({\n            timerSeconds: this.GetTimerSeconds(),\n            timerPercent: this.GetTimerPercent()\n        })\n    }\n\n    componentWillUnmount() {\n        cancelAnimationFrame(this.animationFrameID)\n    }\n\n\n    RespondToSocketMessages(e) {\n        if(this.socket === undefined) return;\n        super.RespondToSocketMessages(e);\n\n        console.log(e.data);\n\n        const transitionToGameMessage = \"TRANSITION QUESTIONMATCH \";\n\n        if (e.data.startsWith(transitionToGameMessage)) {\n            //TODO make format: playername,playeranswer;playername,playeranswer;...\n            let pairs = e.data.substr(transitionToGameMessage.length);\n            console.log(\"Server told us to transition to QUESTIONMATCH. Transitioning...\");\n            console.log(\"Pairs: \", pairs);\n            this.setState({redirect: true, pairs: pairs});\n        }\n\n        const timerMessage = \"TIMER \";\n        if (e.data.startsWith(timerMessage)) {\n            let timer = e.data.substr(timerMessage.length);\n            console.log(\"Got timer data \" + timer);\n            let startAndEnd = timer.split(\";\").map(x=>parseInt(x));\n            this.setState({\n                timerStart: startAndEnd[0],\n                timerEnd: startAndEnd[1]\n            });\n            this.animationFrameID = requestAnimationFrame(()=>this.TimerHandler());\n        }\n    }\n\n    TimerHandler() {\n        this.setState({\n            timerSeconds: this.GetTimerSeconds(),\n            timerPercent: this.GetTimerPercent()\n        })\n        if(this.state.timerEnd - new Date().getTime() > 0) {\n            this.animationFrameID = requestAnimationFrame(()=>this.TimerHandler()); // We're using requestAnimationFrame so this runs at the apps framerate\n        }\n    }\n\n    SubmitQuestion() {\n        this.socket.send(\"ANSWER \" + this.answer);\n        console.log(\"Sending answer \" + this.answer);\n        this.doneAnswering = true;\n        this.forceUpdate();\n    }\n\n    HandleAnswerChange(e) {\n        this.answer = e.target.value;\n    }\n\n    GetTimerSeconds() {\n        if(this.state.timerStart && this.state.timerEnd) {\n            return Math.max(Math.floor((this.state.timerEnd - new Date().getTime())/1000), 0);\n        }\n        return 0;\n    }\n\n    GetTimerPercent() {\n        if(this.state.timerStart && this.state.timerEnd) {\n            let elapsed = this.state.timerEnd - new Date().getTime();\n            let percent = elapsed / (this.state.timerEnd - this.state.timerStart);\n            return Math.min(Math.max(percent * 100, 0), 100);\n        }\n        return 100;\n    }\n\n    render() {\n        if (this.state.redirect) {\n            this.CloseNetworkedPage();\n            console.log(\"Transition to Match\");\n            console.log(\"Pairs before transition: \", this.state.pairs);\n            return (\n                <Redirect to={{\n                    pathname: \"/questionmatch\",\n                    state: {\n                        id: this.props.location.state.id,\n                        roomCode: this.props.location.state.roomCode,\n                        name: this.props.location.state.name,\n                        url: this.props.location.state.url,\n                        question: this.props.location.state.question,\n                        matchPairStr: this.state.pairs,\n                    }\n                }} />\n            );\n        } else {\n            return (\n                <div className=\"question\">\n                    <header className=\"App-header\">\n                        <div className=\"prompt\">\n\n                            <ProgressBar now={this.state.timerPercent} label={`${this.state.timerSeconds} secs left!`}/>\n                            <br/>\n\n                            <h1>QUESTION</h1>\n\n                            <Card border=\"primary\" bg=\"light\" text=\"dark\">\n                                <Card.Body>{this.props.location.state.question}</Card.Body>\n                            </Card>\n\n                            <Form.Group>\n                                <br/>\n                                <Form.Control type=\"text\" placeholder=\"Type your answer here!\" onChange={this.HandleAnswerChange}/>\n                                <br/>\n                                <ButtonOrWait label={\"Submit Answer\"} switchToWait={this.doneAnswering} callback={()=>this.SubmitQuestion()}/>\n                            </Form.Group>\n                        </div>\n                    </header>\n                </div>\n            );\n        }\n    }\n\n}\n\nexport default Question;\n\n","import '../css/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport React from 'react';\nimport NetworkedPage from \"../utility/NetworkedPage\";\nimport {Redirect} from \"react-router-dom\";\n\nclass WaitingRoom extends NetworkedPage {\n\n    constructor(props) {\n        super(props);\n        this.socket = undefined;\n        this.playerElements = [];\n    };\n\n    componentDidMount() {\n        this.ConnectToWebsocket(\n            this.props.location.state.url,\n            this.props.location.state.id,\n            this.props.location.state.name\n        );\n    }\n\n    RespondToSocketMessages(e) {\n        if(this.socket === undefined) return;\n        super.RespondToSocketMessages(e);\n\n        console.log(e.data);\n\n        const transitionToGameMessage = \"TRANSITION QUESTION \";\n        if (e.data.startsWith(transitionToGameMessage)) {\n            this.question = e.data.substr(transitionToGameMessage.length);\n            this.setState({redirect: true});\n            console.log(\"Got Question transition WAITING ROOM. Question is \" + this.question);\n        }\n\n        const playerUpdateMessage = \"PLAYERUPDATE \";\n        if (e.data.startsWith(playerUpdateMessage)) {\n            let playerNames = e.data.substr(playerUpdateMessage.length).split(\";\"); // TODO: people can put ; in their name and break this\n            this.playerElements = playerNames.map(x=><h5>{x}</h5>);\n            this.forceUpdate();\n        }\n    }\n\n    render() {\n        if (this.state.redirect) {\n            this.CloseNetworkedPage();\n            return (\n                <Redirect to={{\n                    pathname: \"/Question\",\n                    state: {\n                        id: this.props.location.state.id,\n                        roomCode: this.state.roomCode,\n                        name: this.props.location.state.name,\n                        url: this.props.location.state.url,\n                        question: this.question,\n                    }\n                }}/>\n            );\n        }\n        else {\n            return (\n                <div className=\"waitingroom\">\n\n                    <header className=\"App-header\">\n                        <div className=\"players\">\n                            <h1>Waiting for more players to join...</h1>\n                            {this.playerElements.length === 0 &&\n                            <h5>* as players join, their names will show up here * </h5>}\n                            {this.playerElements}\n                        </div>\n                    </header>\n                </div>\n            );\n        }\n    }\n}\n\nexport default WaitingRoom;\n\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\nimport logo from \"../media/logo.svg\";\nimport {Button} from \"react-bootstrap\";\nimport {isChrome, isFirefox, isSafari} from 'react-device-detect';\n\nexport const Home = () => {\n    if(!(isChrome || isFirefox || isSafari)) {\n        alert(\"Warning: You are using an unsupported browser. This game is only tested with Chrome, Firefox, and Safari. You may encounter bugs because of this\");\n    }\n    return (\n        <div className=\"Center\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <div className= \"mb-2\">\n                    <h1>\n                        Do You Know Me?\n                    </h1>\n                    <h5><i>\n                        Play with your friends!\n                    </i>\n                    </h5>\n                </div>\n\n                <div className=\"mb-2\">\n                    <Button href=\"/creategame\" variant=\"primary\" size=\"lg\" block> Create Game </Button>{' '}\n\n                </div>\n                <div className=\"mb-2\">\n                    <Button href=\"/joingame\" variant=\"primary\" size=\"lg\" block> Join Game </Button>{' '}\n                </div>\n\n                <div>\n                    <h6>Team SOFT</h6>\n                    <a\n                        className=\"App-link\"\n                        href=\"https://github.com/UMBCSOFT\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        <h6>Repo for this project</h6>\n                    </a>\n                </div>\n            </header>\n        </div>\n    )\n};\n","import React from \"react\";\nimport {Col, Row} from \"react-bootstrap\";\n\nclass ScoreContent extends React.Component {\n    constructor(props) {\n        /* expects a list of players called playerList with attributes:\n        *  name\n        *  score (total score for game so far)\n        *  numCorrectMatches (score for this round only)\n         */\n        super(props);\n        this.isDisplayRoundScore = props.displayRoundScore;\n        this.playerList = props.playerList\n    }\n\n    GenerateScoreContent() {\n        let scoreRowList = [];\n        let orderedPlayerList = this.playerList.sort((a, b) => b.score - a.score);\n        let roundScore = null;\n        for (let i = 0; i < orderedPlayerList.length; i++) {\n            if (this.isDisplayRoundScore) {\n                roundScore = <Col md={\"auto\"}>+{orderedPlayerList[i].numCorrectMatches}</Col>\n            }\n            scoreRowList.push(\n                <Row>\n                    <Col md={\"auto\"}>{i + 1}. </Col>\n                    <Col md={\"auto\"}>{orderedPlayerList[i].name}</Col>\n                    {roundScore}\n                    <Col md={\"auto\"}>{orderedPlayerList[i].score}</Col>\n                </Row>\n            )\n        }\n        return scoreRowList;\n    }\n\n    render() {\n        return (this.GenerateScoreContent());\n    }\n}\n\nexport default ScoreContent;","import '../css/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport React from 'react';\nimport NetworkedPage from \"../utility/NetworkedPage\";\nimport {Redirect} from \"react-router-dom\";\nimport ButtonOrWait from \"../Component/ButtonOrWait\";\nimport ScoreContent from \"../utility/ScoreContent\";\n\nclass Scores extends NetworkedPage {\n    constructor() {\n        super();\n        this.HandleClick = this.HandleClick.bind(this);\n        this.clickedSubmit = false;\n        this.isLastRound = false;\n        this.wasAbleToTransition = null;\n        this.question = null;\n        this.state = {\n            playerScoresObjList: []\n        }\n    }\n\n    UNSAFE_componentWillMount() {\n        this.ConnectToWebsocket(\n            this.props.location.state.url,\n            this.props.location.state.id,\n            this.props.location.state.name\n        );\n    }\n\n    IsLastRound() {\n        this.socket.send(\"ISLASTROUND\");\n    }\n\n    GetPlayerList() {\n        this.socket.send(\"GETPLAYERSCORES\")\n    }\n\n    ConvertScoreStrToObjList(scoresStr) {\n        let playerScoresStrList = scoresStr.split(';');\n\n        let playerScoresObjList = [];\n        for (let info of playerScoresStrList) {\n            const infoList = info.split(',');\n            playerScoresObjList.push({\n                    name: infoList[0],\n                    score: infoList[1],\n                    numCorrectMatches: infoList[2]\n                }\n            );\n        }\n        return playerScoresObjList;\n    }\n\n    RespondToSocketMessages(e, callback) {\n        if (e.data.startsWith(\"ISLASTROUND \")) {\n            const response = e.data.substr(\"IS LAST ROUND \".length);\n            this.isLastRound = (response === \"TRUE\");\n            if (this.isLastRound) {\n                this.forceUpdate();\n            }\n        }\n        const transitionToGameMessage = \"TRANSITION QUESTION \";\n        const transitionEndGame = \"TRANSITION ENDGAME\";\n        if (e.data.startsWith(transitionToGameMessage) || e.data.startsWith(transitionEndGame)) {\n            this.wasAbleToTransition = true;\n            this.question = e.data.substr(transitionToGameMessage.length);\n            this.isLastRound = e.data.startsWith(transitionEndGame);\n            this.setState({\n                redirect: true,\n            });\n            console.log(\"Got Question transition SCORES. Question is \" + this.question);\n        }\n\n        // Expecting string of: name,totalscore,roundscore;name,totalscore,roundscore;etc\n        const playerScoreMessage = \"PLAYERSCORES \";\n        if (e.data.startsWith(playerScoreMessage)) {\n            let playerScoreStr = e.data.substr(playerScoreMessage.length);\n            this.setState({\n                playerScoresObjList: this.ConvertScoreStrToObjList(playerScoreStr)\n            });\n        }\n        super.RespondToSocketMessages(e, callback);\n    }\n\n    HandleClick() {\n        this.clickedSubmit = true;\n        this.forceUpdate();\n        this.socket.send(\"READYNEXTROUND\")\n    }\n\n    render() {\n        if (this.socket) {\n            this.IsLastRound();\n        } else {\n            setTimeout(this.IsLastRound, 2000);\n        }\n        if (this.state.redirect) {\n            this.CloseNetworkedPage();\n            if (this.isLastRound) {\n                console.log(\"Transition to end screen\");\n                return (\n                    <Redirect to={{\n                        pathname: \"/endgame\",\n                        state: {\n                            id: this.props.location.state.id,\n                            roomCode: this.props.location.state.roomCode,\n                            name: this.props.location.state.name,\n                            url: this.props.location.state.url,\n                            playerScoresObjList: this.state.playerScoresObjList\n                        }\n                    }}/>\n                );\n            } else {\n                console.log(\"Transition to next round\");\n                return (\n                    <Redirect to={{\n                        pathname: \"/question\",\n                        state: {\n                            id: this.props.location.state.id,\n                            roomCode: this.props.location.state.roomCode,\n                            name: this.props.location.state.name,\n                            url: this.props.location.state.url,\n                            question: this.question\n                        }\n                    }}/>\n                );\n            }\n        } else {\n            this.GetPlayerList();\n            let scoreContent = null;\n            if (this.state.playerScoresObjList.length > 0) {\n                scoreContent = <ScoreContent displayRoundScore={true} playerList={this.state.playerScoresObjList}/>;\n            }\n            return (\n                <div className=\"scores\">\n                    <header className=\"App-header\">\n                        <h1>SCORE PAGE</h1>\n                        {scoreContent}\n                        <ButtonOrWait label={\"Ready?\"} switchToWait={this.clickedSubmit} callback={()=>this.HandleClick()}/>\n                    </header>\n                </div>\n            );\n        }\n\n    }\n}\nexport default Scores;\n\n","import '../css/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Col, Dropdown, DropdownButton, Row} from 'react-bootstrap';\nimport Card from 'react-bootstrap/Card';\nimport React from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport NetworkedPage from \"../utility/NetworkedPage\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport ButtonOrWait from \"../Component/ButtonOrWait\";\n\nclass MatchDropdown extends React.Component {\n    constructor(props) {\n        super(props);\n        this.currectPlayer = props.currentPlayer;\n        this.correctPlayer = props.pair[0];\n        this.correctPlayerAnswer = props.pair[1];\n        this.matchPairList = props.matchPairList;\n        this.callback = props.callback;\n        this.callback = this.callback.bind(this);\n\n        this.setBtnRef = element => {\n            this.btnRef = element;\n        }\n    }\n\n    LocalHandleDropdownSelect(chosenPlayerPair) {\n        this.props.callback(this.correctPlayer, this.correctPlayerAnswer, chosenPlayerPair[0], chosenPlayerPair[1]);\n        this.btnRef.getElementsByTagName(\"button\")[0].innerHTML = chosenPlayerPair[0];\n    }\n\n    GetDropdown() {\n        let playerList = [];\n        for (let chosenPlayerPair of this.matchPairList) {\n            if (chosenPlayerPair[0] === this.currectPlayer) continue;\n            playerList.push(\n                <Dropdown.Item key={chosenPlayerPair} onClick={() => this.LocalHandleDropdownSelect(chosenPlayerPair)}>\n                    {chosenPlayerPair[0]}\n                </Dropdown.Item>\n            );\n        }\n        return (\n            <DropdownButton title={\"Guess author...\"} ref={this.setBtnRef}>\n                {playerList}\n            </DropdownButton>\n        );\n    }\n\n    render() {\n        return(this.GetDropdown());\n    }\n}\n\nclass MatchRow extends React.Component {\n    constructor(props) {\n        super(props);\n        this.currentPlayer = props.currentPlayer;\n        this.pair = props.pair;\n        this.matchPairList = props.matchPairList;\n        this.callback = props.callback;\n    }\n\n    render() {\n        return (\n            // Row of an answer + a dropdown of all players\n            <Row>\n                <Col>{this.pair[1]}</Col>\n                <Col><MatchDropdown\n                    key={this.pair}\n                    currentPlayer={this.currentPlayer}\n                    pair={this.pair}\n                    matchPairList={this.matchPairList}\n                    callback={this.callback}/>\n                </Col>\n            </Row>\n        );\n    }\n}\n\nclass QuestionMatch extends NetworkedPage {\n\n    constructor(props) {\n        super(props);\n        this.HandleSubmit = this.HandleSubmit.bind(this);\n        this.HandleDropdownSelect = this.HandleDropdownSelect.bind(this);\n        this.state = {\n            matchPairList: this.ConvertNameAnswerPairsStrToList(),\n            matches: {}\n        }\n    }\n\n    componentDidMount() {\n        this.ConnectToWebsocket(\n            this.props.location.state.url,\n            this.props.location.state.id,\n            this.props.location.state.name\n        );\n        this.socket.send(\"REQUESTTIMER\");\n        this.setState({\n            timerSeconds: this.GetTimerSeconds(),\n            timerPercent: this.GetTimerPercent()\n        })\n    }\n\n    //Durstenfeld Shuffle\n    //https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n    ShuffleArray(array) {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n    }\n\n    RespondToSocketMessages(e) {\n        if(this.socket === undefined) return;\n        super.RespondToSocketMessages(e);\n\n        console.log(e.data);\n\n        const transitionToGameMessage = \"TRANSITION SCORE\";\n\n        if (e.data.startsWith(transitionToGameMessage)) {\n            console.log(\"Transitioning to score screen\");\n            this.setState({redirect: true});\n            return;\n        }\n\n        const timerMessage = \"TIMER \";\n        if (e.data.startsWith(timerMessage)) {\n            let timer = e.data.substr(timerMessage.length);\n            console.log(\"Got timer data \" + timer);\n            let startAndEnd = timer.split(\";\").map(x=>parseInt(x));\n            this.setState({\n                timerStart: startAndEnd[0],\n                timerEnd: startAndEnd[1]\n            });\n            requestAnimationFrame(()=>this.TimerHandler());\n        }\n    }\n\n    TimerHandler() {\n        this.setState({\n            timerSeconds: this.GetTimerSeconds(),\n            timerPercent: this.GetTimerPercent()\n        })\n        if(this.state.timerEnd - new Date().getTime() > 0)\n            requestAnimationFrame(()=>this.TimerHandler()); // We're using requestAnimationFrame so this runs at the apps framerate\n    }\n\n    GetTimerSeconds() {\n        if(this.state.timerStart && this.state.timerEnd) {\n            return Math.max(Math.floor((this.state.timerEnd - new Date().getTime())/1000), 0);\n        }\n        return 0;\n    }\n    GetTimerPercent() {\n        if(this.state.timerStart && this.state.timerEnd) {\n            let elapsed = this.state.timerEnd - new Date().getTime();\n            let percent = elapsed / (this.state.timerEnd - this.state.timerStart);\n            return Math.min(Math.max(percent * 100, 0), 100);\n        }\n        return 100;\n    }\n\n    ConvertNameAnswerPairsStrToList() {\n        let pairStrList = this.props.location.state.matchPairStr.split(';');\n        let pairList = [];\n        for (let pStr of pairStrList) {\n            let matchStr = pStr.split(',');\n            if (matchStr[0] === this.props.location.state.name) continue;\n            pairList.push(matchStr);\n        }\n        return pairList;\n    }\n\n    ConvertMatchesToStr() {\n        let matchesList = [];\n        for (let key in this.state.matches) {\n            if (this.state.matches.hasOwnProperty(key)) {\n                matchesList.push(this.state.matches[key].join(','));\n            }\n        }\n        return matchesList.join(';')\n    }\n\n\n    HandleSubmit() {\n        this.doneAnswering = true;\n        const playerMatches = this.ConvertMatchesToStr();\n        this.socket.send(\"DONEMATCHING \" + playerMatches);\n    }\n\n    HandleDropdownSelect(correctPlayer, correctPlayerAnswer, guessedPlayer, guessedPlayerAnswer) {\n        console.log(\"Chosen player: \", guessedPlayer + \"\\nCorrect player: \", correctPlayer);\n        let newMatches = this.state.matches;\n        newMatches[[correctPlayer, correctPlayerAnswer].join(\"-->\")] = [correctPlayer, correctPlayerAnswer, guessedPlayer, guessedPlayerAnswer];\n        this.setState( {\n            matches: newMatches\n        });\n    }\n\n    render(){\n        if (this.state.redirect) {\n            this.CloseNetworkedPage();\n            console.log(\"Transition to Scores\");\n            return (\n                <Redirect to={{\n                    pathname: \"/scores\",\n                    state: {\n                        id: this.props.location.state.id,\n                        roomCode: this.props.location.state.roomCode,\n                        name: this.props.location.state.name,\n                        url: this.props.location.state.url,\n                        question: this.props.location.state.question,\n                    }\n                }} />\n            )\n        } else {\n            if(this.options === undefined) {\n                console.log(\"Player Answers: \" + this.state.matchPairList);\n\n                // create a list with a row with a dropdown for each player's answer (except your own)\n                this.options = [];\n                for(let pair of this.state.matchPairList) {\n                    if (pair[0] === this.props.location.state.name) continue;\n                    this.options.push(\n                        <MatchRow\n                            key={pair}\n                            currentPlayer={this.props.location.state.name}\n                            pair={pair}\n                            matchPairList={this.state.matchPairList}\n                            callback={this.HandleDropdownSelect}\n                        />\n                    );\n                }\n                this.ShuffleArray(this.options);\n            }\n            return (\n                <div className=\"questionmatch\">\n\n                    <header className=\"App-header\">\n                        <div className= \"mb-2\">\n                            <h1>Round 1</h1>\n\n                            <br />\n                            <Card border=\"primary\" bg=\"light\" text = \"dark\">\n                                <Card.Body>{this.props.location.state.question}</Card.Body>\n                            </Card>\n\n                            <br />\n                            <h4>Match each answer to a player!</h4>\n\n                            <Card text = \"dark\" style={{ width: '100%' }}>\n                                {this.options}\n                            </Card>\n\n                            <ProgressBar now={this.state.timerPercent} label={`${this.state.timerSeconds} secs left!`}/>\n                            <ButtonOrWait label={\"Submit Answer\"} switchToWait={this.doneAnswering} callback={()=>this.HandleSubmit()}/>\n                        </div>\n                    </header>\n                </div>\n            );\n\n        }\n    }\n}\n\nexport default QuestionMatch;\n\n","import React from \"react\";\nimport ScoreContent from \"./ScoreContent\";\n\nclass GameSummaryContent extends React.Component {\n    constructor(props) {\n        /* expects a list of players called playerList with attributes:\n        *  name\n        *  score (total score for game so far)\n        *  numCorrectMatches (score for this round only)\n         */\n        super(props);\n        this.question = undefined;\n        this.playerList = props.playerList\n    }\n\n    GetWinner() {\n        let winner = this.playerList[0];\n        for (let p of this.playerList) {\n            if (p.score > winner.score) {\n                winner = p;\n            }\n        }\n\n        return winner;\n    }\n\n    render() {\n        return (\n            <div>\n                <ScoreContent displayRoundScore={false} playerList={this.playerList}/>\n                <br/>\n                <h1>Winner: {this.GetWinner().name}</h1>\n                <h2>with {this.GetWinner().score} point(s)!</h2>\n            </div>\n        );\n    }\n}\n\nexport default GameSummaryContent;","import '../css/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport React from 'react';\nimport NetworkedPage from \"../utility/NetworkedPage\";\nimport GameSummaryContent from \"../utility/GameSummaryContent\";\nimport {Button} from 'react-bootstrap';\nimport {Redirect} from \"react-router-dom\";\n\n// Ty Nuha!\nclass EndGame extends NetworkedPage {\n    constructor(props) {\n        super(props);\n        this.HandleClick = this.HandleClick.bind(this);\n        this.clickedSubmit = false;\n        this.wasAbleToTransition = null;\n        this.buttons = {\n            MAIN_MENU: \"main menu\",\n            PLAY_AGAIN: \"play again\"\n        }\n        this.state = {\n            playerScoresObjList: []\n        }\n    }\n\n    componentDidMount() {\n        this.ConnectToWebsocket(\n            this.props.location.state.url,\n            this.props.location.state.id,\n            this.props.location.state.name\n        );\n    }\n    RespondToSocketMessages(e, callback) {\n        const transitionToGameMessage = \"TRANSITION QUESTION \";\n        if (e.data.startsWith(transitionToGameMessage)) {\n            this.question = e.data.substr(transitionToGameMessage.length);\n            this.setState({\n                redirect: true,\n            });\n            console.log(\"Got Question transition SCORES. Question is \" + this.question);\n        }\n\n        super.RespondToSocketMessages(e, callback);\n    }\n\n    HandleClick(btnChoice) {\n        this.clickedSubmit = true;\n        if (btnChoice === null || btnChoice === undefined) {\n            console.error(\"btnChoice is not defined\");\n        }\n        this.setState( {\n            playAgain: (btnChoice === this.buttons.PLAY_AGAIN),\n            redirect: true\n        });\n\n        // get next round's question if playing again\n        if (btnChoice === this.buttons.PLAY_AGAIN) {\n            this.socket.send(\"READYNEXTROUND\");\n        }\n    }\n\n    render() {\n        if (this.state.redirect) {\n            this.CloseNetworkedPage();\n            if (this.state.playAgain) {\n                console.log(\"Transition to next round\");\n                return (\n                    <Redirect to={{\n                        pathname: \"/question\",\n                        state: {\n                            id: this.props.location.state.id,\n                            roomCode: this.props.location.state.roomCode,\n                            name: this.props.location.state.name,\n                            url: this.props.location.state.url,\n                            question: this.question\n                        }\n                    }}/>\n                );\n            } else {\n                console.log(\"End game and return to main menu\");\n                return (\n                    <Redirect to={{\n                        pathname: \"/\",\n                        state: {}\n                    }}/>\n                );\n\n            }\n        } else {\n            let gameSummaryContent = null;\n            let playerList = this.props.location.state.playerScoresObjList;\n            if (playerList.length > 0) {\n                gameSummaryContent = <GameSummaryContent playerList={playerList}/>;\n            }\n            return (\n                <div className=\"scores\">\n                    <header className=\"App-header\">\n                        <h1>GAME SUMMARY</h1>\n                        {gameSummaryContent}\n                        <br/>\n                        {/*TODO make play again work. the back-end doesn't support it.*/}\n                        {/*<div className={\"mb-2\"}>*/}\n                        {/*    <ButtonOrWait label={\"Play Again?\"} switchToWait={this.clickedSubmit} callback={()=>this.HandleClick(this.buttons.PLAY_AGAIN)}/>*/}\n                        {/*</div>*/}\n                        <div className={\"mb-2\"}>\n                            <Button variant=\"primary\" type=\"submit\" onClick={()=>this.HandleClick(this.buttons.MAIN_MENU)}>\n                                Main Menu\n                            </Button>\n                        </div>\n                    </header>\n                </div>\n            );\n        }\n\n    }\n}\n\nexport default EndGame;","export default __webpack_public_path__ + \"static/media/mainmenu.5a6a16fe.png\";","export default __webpack_public_path__ + \"static/media/creategame.9c6f4caa.png\";","export default __webpack_public_path__ + \"static/media/joingame.604d9a3b.png\";","export default __webpack_public_path__ + \"static/media/waitingroom.343b6348.png\";","export default __webpack_public_path__ + \"static/media/waitingroom2.bbe6bc84.png\";","export default __webpack_public_path__ + \"static/media/question.b4ce4b67.png\";","export default __webpack_public_path__ + \"static/media/gamematch.5c6bdef9.png\";","export default __webpack_public_path__ + \"static/media/roundend.82143212.png\";","export default __webpack_public_path__ + \"static/media/finalscores.570fe1cd.png\";","export default __webpack_public_path__ + \"static/media/dykm.54ceb8c1.png\";","import '../css/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport React from 'react';\nimport Carousel from 'react-bootstrap/Carousel';\nimport mainmenu from '../media/mainmenu.png';\nimport creategame from '../media/creategame.png';\nimport joingame from '../media/joingame.png';\nimport waitingroom from '../media/waitingroom.png';\nimport waitingroom2 from '../media/waitingroom2.png';\nimport question from '../media/question.png';\nimport questionmatch from '../media/gamematch.png';\nimport roundend from '../media/roundend.png';\nimport finalscores from '../media/finalscores.png';\nimport dykm from '../media/dykm.png';\n\n\nfunction ProductPage(){\n    return (\n        <div className=\"ProductPage\">\n            <header className=\"App-header\">\n                <br></br>\n            <div className= \"mb-2\">\n                <img src={dykm} alt=\"logo\" />\n\n              <h1>Do You Know Me?</h1>\n\n              <h5><i>See if you really know your friends!</i></h5>\n              <br></br>\n\n              <h5><i>\n              Do You Know Me? is a fun, friend-group focused, web-based multiplayer game \n              built around the idea of figuring out how well you know your friends. You \n              can create a game, invite all your friends to join with a secret game code, \n              choose the question pack you want to play with, and choose how many rounds \n              of the game you’d like to play. Each round, all players are asked the same \n              question from the pre-chosen game pack and must submit an answer. Afterwards, \n              all the answers are gathered and then all of the players must guess who wrote \n              each answer. For each question and answer pair you match correctly, you get \n              a point. The main idea of the game is to see whether or not you really know \n              your friends!\n\n              </i></h5>\n              <br></br>\n              <h5><i>*30 second demo video here*</i></h5>\n              <br></br>\n              \n              <h5><i>\n                <Carousel>\n                    <Carousel.Item>\n                        <img\n                        className=\"d-block w-100\"\n                        src={mainmenu}\n                        alt=\"First slide\"\n                        style={{width:\"10%\", height:\"auto\"}}\n                        />\n                    </Carousel.Item>\n                    <Carousel.Item>\n                        <img\n                        className=\"d-block w-100\"\n                        src={creategame}\n                        alt=\"Second slide\"\n                        />\n                    </Carousel.Item>\n                    <Carousel.Item>\n                        <img\n                        className=\"d-block w-100\"\n                        src={joingame}\n                        alt=\"Third slide\"\n                        />\n                    </Carousel.Item>\n                    <Carousel.Item>\n                        <img\n                        className=\"d-block w-100\"\n                        src={waitingroom}\n                        alt=\"Third slide\"\n                        />\n                    </Carousel.Item>\n                    <Carousel.Item>\n                        <img\n                        className=\"d-block w-100\"\n                        src={waitingroom2}\n                        alt=\"Third slide\"\n                        />\n                    </Carousel.Item>\n                    <Carousel.Item>\n                        <img\n                        className=\"d-block w-100\"\n                        src={question}\n                        alt=\"Third slide\"\n                        />\n                    </Carousel.Item>\n                    <Carousel.Item>\n                        <img\n                        className=\"d-block w-100\"\n                        src={questionmatch}\n                        alt=\"Third slide\"\n                        />\n                    </Carousel.Item>\n                    <Carousel.Item>\n                        <img\n                        className=\"d-block w-100\"\n                        src={roundend}\n                        alt=\"Third slide\"\n                        />\n                    </Carousel.Item>\n                    <Carousel.Item>\n                        <img\n                        className=\"d-block w-100\"\n                        src={finalscores}\n                        alt=\"Third slide\"\n                        />\n                    </Carousel.Item>\n                </Carousel>\n              </i></h5>\n             \n              <br></br>\n            </div>\n            </header>\n        </div>\n    );\n}\n\nexport default ProductPage;\n","import {Route, Switch} from \"react-router-dom\";\nimport About from \"../pages/About\";\nimport HowToPlay from \"../pages/HowToPlay\";\nimport CreateGame from \"../pages/CreateGame\";\nimport JoinGame from \"../pages/JoinGame\";\nimport React from \"react\";\nimport HostWaitingRoom from \"../pages/HostWaitingRoom\";\nimport Question from \"../pages/Question\";\nimport WaitingRoom from \"../pages/WaitingRoom\";\nimport {Home} from \"../pages/Home\";\nimport Scores from \"../pages/Scores\";\nimport QuestionMatch from \"../pages/QuestionMatch\";\nimport EndGame from \"../pages/EndGame\";\nimport ProductPage from \"../pages/ProductPage\";\n\nexport const Content = () => {\n    return (\n        <Switch>\n            <Route exact path=\"/\"><Home/></Route>\n            <Route path=\"/about\"><About/></Route>\n            <Route path=\"/howToPlay\"><HowToPlay/></Route>\n            <Route path=\"/waitingroom\" component={WaitingRoom}/>\n            <Route path=\"/creategame\" component={CreateGame} />\n            <Route path=\"/joingame\" component={JoinGame} />\n            <Route path=\"/hostwaitingroom\" component={HostWaitingRoom} />\n            <Route path=\"/question\" component={Question} />\n            <Route path=\"/questionmatch\" component={QuestionMatch} />\n            <Route path=\"/scores\" component={Scores} />\n            <Route path=\"/endgame\" component={EndGame} />\n            <Route path=\"/productpage\" component={ProductPage} />\n        </Switch>\n    );\n};\n","import './css/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport React from \"react\";\nimport Header from \"./Header\";\nimport {Content} from \"./utility/Content\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport Frame from 'react-frame-component';\nconst initialContent = `<!DOCTYPE html><html><head>${[].slice.call(document.head.getElementsByTagName(\"style\")).map(x => x.outerHTML).join('')}</head><body><div></div></body></html>`;\nfunction App() {\n    return (\n        <Frame initialContent={initialContent} frameBorder=\"0\" id={\"Frame\"}>\n            <BrowserRouter>\n                <div>\n                    <Header/>\n                    <Content/>\n                </div>\n            </BrowserRouter>\n        </Frame>\n);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport reportWebVitals from './utility/reportWebVitals';\nimport './utility/shared_websocket.js';\n\n//const initialContent = `<!DOCTYPE html><html><head>${document.head.innerHTML}</head><body><div></div></body></html>`;\n\nif (typeof window !== 'undefined') {\n    ReactDOM.render(\n        <App/>,\n        document.getElementById('root')\n    );\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}